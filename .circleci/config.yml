# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    working_directory: ~/project/recipefinder
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout:
          path: ~/project
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
  build-and-test-mysql-recipefinder:
    working_directory: ~/project/spring5-mysql-recipe-app
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout:
          path: ~/project
          
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests! and gen code coverage
      - run: mvn integration-test cobertura:cobertura

      - store_test_results:
          path: target/surefire-reports

      - run:
          name: Send to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
  build-and-test-spc:
    working_directory: ~/project/SpringPetClinic
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout:
          path: ~/project

      # Download and cache dependencies
      - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-


      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Install
          command: mvn install -DskipTests

      - run: mvn dependency:go-offline

      - save_cache:
              paths:
              - ~/.m2
              key: v1-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: Format Code
          command: mvn spring-javaformat:apply -pl  pet-clinic-web

      # run tests!
      - run: mvn integration-test 
  build-and-test-rest:
    working_directory: ~/project/spring5-mvc-rest
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout:
          path: ~/project

      # Download and cache dependencies
      - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-


      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Install
          command: mvn install -DskipTests

      - run: mvn dependency:go-offline

      - save_cache:
              paths:
              - ~/.m2
              key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test cobertura:cobertura

      - store_test_results:
          path: target/surefire-reports

      - run:
          name: Send to CodeCov
          command: bash <(curl -s https://codecov.io/bash)

workflows:
  mvntest: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
  testspringpetclinic:
    jobs:
      - build-and-test-spc
  testrestmvc:
    jobs:
      - build-and-test-rest